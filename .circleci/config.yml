# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build-api:
    working_directory: ~/repo
    machine:
      image: ubuntu-2004:current
    environment:
      BASE_DIR: ./openapi
      MVN_SETTINGS: ./scripts/settings.xml
      MVN_OPS: -Dmaven.javadoc.skip=true -Dmaven.test.skip=true -DaltDeploymentRepository=github::default::https://maven.pkg.github.com/luanvuhlu/bookstore-openapi
    steps:
    - checkout
    - restore_cache:
        keys:
          - v1-pip-dependencies-{{ .Branch }}-{{ checksum "openapi/scripts/requirements.txt" }}
          - v1-pip-dependencies-
    - run:
        name: "Install dependencies"
        command: |
          cd ${BASE_DIR}
          python3 -m venv venv
          . venv/bin/activate
          if [ -f scripts/requirements.txt ]; then 
            pip install -r scripts/requirements.txt; 
          fi
    - run:
        name: "Build"
        command: |
          cd ${BASE_DIR}
          . venv/bin/activate
          python scripts/deploy.py
    - run:
        name: "Publish to Github Packages"
        command: |
          for i in openapi/out/*/pom.xml;do 
            mvn --batch-mode deploy -s ${MVN_SETTINGS} -f "$i" ${MVN_OPS} ; 
          done
    - save_cache: # ** special step to save dependency cache **
        key: v1-pip-dependencies-{{ .Branch }}-{{ checksum "openapi/scripts/requirements.txt" }}
        paths:
          - "openapi/venv"
  test-audit:
    working_directory: ~/repo
    docker:
      - image: cimg/openjdk:11.0.12
    environment:
      MVN_SETTINGS: ./scripts/settings.xml
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - checkout
      - restore_cache:
          keys:
            - v1-maven-dependencies-audit-{{ checksum "audit/pom.xml" }}
            - v1-maven-dependencies-audit-
      - run:
          name: "Test"
          command: mvn -s ${MVN_SETTINGS} -B test --file audit/pom.xml
      - save_cache:
          paths:
            - ~/.m2
          key: v1-maven-dependencies-audit-{{ checksum "audit/pom.xml" }}
  test-configuration-server:
    working_directory: ~/repo
    docker:
      - image: cimg/openjdk:11.0.12
    environment:
      MVN_SETTINGS: ./scripts/settings.xml
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - checkout
      - restore_cache:
          keys:
            - v1-maven-dependencies-configuration-{{ checksum "configuration-server/pom.xml" }}
            - v1-maven-dependencies-configuration-
      - run:
          name: "Test"
          command: mvn -s ${MVN_SETTINGS} -B test --file configuration-server/pom.xml
      - save_cache:
          paths:
            - ~/.m2
          key: v1-maven-dependencies-configuration-{{ checksum "configuration-server/pom.xml" }}
  test-discovery-server:
    working_directory: ~/repo
    docker:
      - image: cimg/openjdk:11.0.12
    environment:
      MVN_SETTINGS: ./scripts/settings.xml
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - checkout
      - restore_cache:
          keys:
            - v1-maven-dependencies-discovery-{{ checksum "discovery-server/pom.xml" }}
            - v1-maven-dependencies-discovery-
      - run:
          name: "Test"
          command: mvn -s ${MVN_SETTINGS} -B test --file discovery-server/pom.xml
      - save_cache:
          paths:
            - ~/.m2
          key: v1-maven-dependencies-discovery-{{ checksum "discovery-server/pom.xml" }}
  test-gateway:
    working_directory: ~/repo
    docker:
      - image: cimg/openjdk:11.0.12
    environment:
      MVN_SETTINGS: ./scripts/settings.xml
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - checkout
      - restore_cache:
          keys:
            - v1-maven-dependencies-gateway-{{ checksum "gateway/pom.xml" }}
            - v1-maven-dependencies-gateway-
      - run:
          name: "Test"
          command: mvn -s ${MVN_SETTINGS} -B test --file gateway/pom.xml
      - save_cache:
          paths:
            - ~/.m2
          key: v1-maven-dependencies-gateway-{{ checksum "gateway/pom.xml" }}
  test-louis-store:
    working_directory: ~/repo
    docker:
      - image: cimg/openjdk:11.0.12
    environment:
      MVN_SETTINGS: ./scripts/settings.xml
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - checkout
      - restore_cache:
          keys:
            - v1-maven-dependencies-louis-store-{{ checksum "louis-store/pom.xml" }}
            - v1-maven-dependencies-louis-store-
      - run:
          name: "Test"
          command: mvn -s ${MVN_SETTINGS} -B test --file louis-store/pom.xml
      - save_cache:
          paths:
            - ~/.m2
          key: v1-maven-dependencies-louis-store-{{ checksum "louis-store/pom.xml" }}
  test-order-service:
    working_directory: ~/repo
    docker:
      - image: cimg/openjdk:11.0.12
    environment:
      MVN_SETTINGS: ./scripts/settings.xml
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - checkout
      - restore_cache:
          keys:
            - v1-maven-dependencies-order-service-{{ checksum "order-service/pom.xml" }}
            - v1-maven-dependencies-order-service-
      - run:
          name: "Test"
          command: mvn -s ${MVN_SETTINGS} -B test --file order-service/pom.xml
      - save_cache:
          paths:
            - ~/.m2
          key: v1-maven-dependencies-order-service-{{ checksum "order-service/pom.xml" }}
  test-product-service:
    working_directory: ~/repo
    docker:
      - image: cimg/openjdk:11.0.12
    environment:
      MVN_SETTINGS: ./scripts/settings.xml
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - checkout
      - restore_cache:
          keys:
            - v1-maven-dependencies-product-service-{{ checksum "product-service/pom.xml" }}
            - v1-maven-dependencies-product-service-
      - run:
          name: "Test"
          command: mvn -s ${MVN_SETTINGS} -B test --file product-service/pom.xml
      - run:
          name: "Build Docker image"
          command: mvn -s ${MVN_SETTINGS} -B compile jib:dockerBuild -Djib.to.tags=latest --file product-service/pom.xml
      - save_cache:
          paths:
            - ~/.m2
          key: v1-maven-dependencies-product-service-store-{{ checksum "product-service/pom.xml" }}
  publish-docker-images:
    working_directory: ~/repo
    docker:
      - image: cimg/openjdk:11.0.12
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - checkout
      - run:
          name: Login to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
      - run:
          name: Publish product-service to Docker Hub
          command: |
            docker push luanvv/product-service:latest

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  test-then-push:
    jobs:
      - build-api:
          context: github-package-context
          filters:
            branches:
              only:
                - develop
                - master
      - test-audit:
          context: github-package-context
          requires:
            - build-api
      - test-configuration-server:
          context: github-package-context
          requires:
            - build-api
      - test-discovery-server:
          context: github-package-context
          requires:
            - build-api
      - test-gateway:
          context: github-package-context
          requires:
            - build-api
      - test-louis-store:
          context: github-package-context
          requires:
            - build-api
      - test-order-service:
          context: github-package-context
          requires:
            - build-api
      - test-product-service:
          context: github-package-context
          requires:
            - build-api
      - publish-docker-images:
          context: docker-hub-context
          requires:
            - test-product-service
          filters:
            branches:
              only:
                - develop
                - master
